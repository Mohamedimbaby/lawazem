import 'package:connectivity/connectivity.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:lawazem/BaseModule/BaseModel.dart';import 'package:lawazem/Home/HomeScreen.dart';import 'package:lawazem/Products/ProductBloc.dart';import 'package:lawazem/Services/Connectivity.dart';import 'package:lawazem/Utils/AppConfig.dart';import 'package:lawazem/Utils/Colors.dart';import 'package:lawazem/Utils/Dimensions.dart';import 'package:lawazem/Utils/Navigation.dart';import 'package:lawazem/Utils/Styles.dart';import 'package:loading_animation_widget/loading_animation_widget.dart';abstract class BaseStatefulWidget extends StatefulWidget {}abstract class BaseStatelessWidget extends StatelessWidget {  final GlobalKey<ScaffoldState> scaffoldKey = new GlobalKey<ScaffoldState>();  @override  Widget build(BuildContext context) {    return Scaffold(        key: scaffoldKey,        body: GestureDetector(          child: Container(            width: MyDimensions.screenWidth,            height: MyDimensions.screenHeight,            child: getScreenBody(context),          ),        ));  }  Widget getScreenBody(BuildContext context);}abstract class BaseState<T extends BaseStatefulWidget> extends State<T> {  final GlobalKey<ScaffoldState> scaffoldKey = new GlobalKey<ScaffoldState>();  refresh(BaseModel viewModel) {    return null;  }  refreshList(List<BaseModel> viewModel) {    return null;  }  List<List<BaseModel>> results = [];  List<Function> functions = [];  @override  void initState() {    ConnectivityService.subscription.onConnectivityChanged.listen((event) {      if (event != ConnectivityResult.none) {        debugPrint("connected again");        if (results != null) {          for (int i = 0; i < results.length; i++) {            if (results[i] != null && results[i].isEmpty) {              functions[i]();              functions.removeAt(i);            }          }        } else          debugPrint("data already ");      } else        debugPrint("connection missing");    });    super.initState();  }  void getWhenConnection(List<BaseModel> results, Function function) {    this.results.add(results);    this.functions.add(function);  }  @override  void dispose() {    super.dispose();    disposeScreen();  }  @override  Widget build(BuildContext context) {    return AnnotatedRegion(        value: SystemUiOverlayStyle.dark.copyWith(          statusBarColor: MAIN,          statusBarIconBrightness: Brightness.light,        ),        child: Scaffold(          appBar: null,          key: scaffoldKey,          body: Container(            color: WHITE,            width: MyDimensions.screenWidth,            height: MyDimensions.screenHeight,            child: getScreenBody(context),          ),          drawer: getDrawer(),          endDrawer: getEndDrawer(),        ));  }  Widget getScreenBody(BuildContext context);  Widget getBottomNavigationBar() {    return Opacity(opacity: 0, child: Container());  }  disposeScreen() {}  Widget getDrawer() {    return Opacity(opacity: 0, child: Container());  }  Widget getEndDrawer() {    return Opacity(opacity: 0, child: Container());  }  navigateToHomeScreen() {    navigateTo(context,        BlocProvider(create: (c) => ProductBloc(), child: HomeScreen()));  }  showLoadingWidget() {    showDialog(        context: context,        barrierDismissible: false,        builder: (BuildContext context) {          return Center(            child: LoadingAnimationWidget.stretchedDots(              color: Colors.white,              size: 50,            ),          );        });  }  void showErrorMsg(String errorMsg) {    showDialog(        context: context,        barrierDismissible: true,        builder: (c) {          return Center(            child: AlertDialog(              title: Text(                AppConfig.labels!.warning,                style: boldText(20, RED),              ),              content: Text(                errorMsg,                style: boldText(18, MAIN),              ),            ),          );        });  }}